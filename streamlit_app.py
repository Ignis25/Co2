import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import chardet
import matplotlib.pyplot as plt
import matplotlib.colors as colors
import matplotlib.colors as mcolors
import sklearn
from sklearn.preprocessing import OrdinalEncoder
from sklearn.linear_model import LinearRegression
import io
import plotly.express as px
import plotly.graph_objects as go
import joblib
import pickle
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report           
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.tree import DecisionTreeRegressor
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import GridSearchCV
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import xgboost as xgb
from sklearn.metrics import mean_squared_error, r2_score


# Permettre √† l'utilisateur de t√©l√©charger un fichier CSV
uploaded_file = st.file_uploader("Choisissez un fichier CSV", type="csv")



if uploaded_file is not None:
    try:
        # Lire le fichier brut pour d√©tecter l'encodage
        raw_data = uploaded_file.getvalue()
        result = chardet.detect(raw_data)
        encoding = result['encoding']
        
        # Lire le fichier CSV avec l'encodage d√©tect√©
        donnees2013 = pd.read_csv(uploaded_file, sep=';', encoding=encoding, on_bad_lines='skip', low_memory=False)
        
        # Afficher les premi√®res lignes du fichier CSV
        st.write("Premi√®res lignes du fichier CSV :")
        
    except pd.errors.ParserError as e:
        st.error(f"Erreur lors de la lecture du fichier CSV : {e}")
        st.stop()
    except Exception as e:
        st.error(f"Une erreur est survenue : {e}")
        st.stop()
else:
    st.write("Veuillez t√©l√©charger un fichier CSV pour continuer.")


#D√©but du code pour tout le monde

st.title("Projet Co2")
st.image("https://cdn.futura-sciences.com/buildsv6/images/wide1920/7/b/2/7b2a2ed969_96670_voiture-propre.jpg", width=300)
st.title("√âmissions de CO2 et V√©hicules : √Ä la Conqu√™te d'un Futur Plus Vert")



#Sidebar 
st.sidebar.title("Sommaire")
pages=["Introduction","Contexte","Exploration des donn√©es", "DataVizualization", "Mod√©lisation 1", "Mod√©lisation 2"]
page=st.sidebar.radio("Naviguer vers", pages)
st.sidebar.write("\n")
st.sidebar.write("\n")
st.sidebar.write("\n")
st.sidebar.write("\n")
st.sidebar.image("https://www.lympho.fr/images/quisommesnous/qui-sommes-nous.jpg", width = 200)


 
# Qui sommes-nous ?
add_selectbox = st.sidebar.selectbox(
    "",
    ("","Arnaud Colombel", "Saric Drazen", "Fran√ßois vergne"))
if add_selectbox == "":
    st.sidebar.write("")
if add_selectbox == "Arnaud Colombel":
    st.sidebar.write("Travaillant en supply chain le transport est au coeur de mon m√©tier. Il y a 2 ans via une politique RSE nous avons commenc√© √† utiliser le transport ferroviaire de livraison de containers pour limiter nos √©missions de Co2. ")
if add_selectbox == "Saric Drazen":
    st.sidebar.write("En tant que Responsable R√©seau Drive en Distribution, je suis en charge de la gestion de quatre centres de distribution. Mon r√¥le inclut la supervision des op√©rations, l'optimisation des processus logistiques et le d√©veloppement de solutions innovantes pour am√©liorer l'efficacit√© et la satisfaction client. Un des d√©fis majeurs dans la livraison √† domicile (LAD) est la gestion du dernier kilom√®tre, qui repr√©sente souvent le co√ªt le plus √©lev√© dans la cha√Æne logistique. Pour relever ce d√©fi, je souhaite d√©velopper un projet visant √† r√©duire les √©missions de CO2 et √† montrer √† nos clients, via notre flotte √©lectrique, notre engagement RSE.")   
if add_selectbox == "Fran√ßois vergne":
    st.sidebar.write("En tant que Responsable Admin. et Financier externe, il est fr√©quent d‚Äôaccompagner mes clients sur la th√©matique des v√©hicules (de fonction, de service, de transport). Pour eux, il s'agit d'une probl√©matique complexe : ils doivent √©quilibrer les avantages et les inconv√©nients entre la hausse des prix des v√©hicules, l‚Äôaccessibilit√© aux diff√©rents types de carburant, les nouvelles r√©glementations environnementales (ex: obligation de renouveler au moins 10 % de leurs v√©hicules chaque ann√©e avec des v√©hicules √† faibles √©missions)  et les enjeux RSE (reporting CSRD, marque-employeur, am√©lioration de l‚Äôimage de l‚Äôentreprise pour faciliter le recrutement, etc‚Ä¶).")
   
 

#D√©but des pages: 
if page == pages[0]:
    st.title("Introduction")
    st.header("üåç **Bienvenue dans l'aventure √©colo-automobile** !üöóüí®")
    st.write(" Vous √™tes pr√™t √† plonger dans un projet captivant qui fusionne technologie, environnement et innovation ? Alors attachez vos ceintures ! Nous sommes sur le point d'explorer un sujet br√ªlant et d'actualit√© : les √©missions de CO2 des v√©hicules. √Ä l'√®re o√π chaque gramme de CO2 compte dans la lutte contre le changement climatique, notre projet s'inscrit parfaitement dans cette d√©marche mondiale pour un avenir plus vert et durable.")
    st.subheader("üå±**CO2, Environnement et Nous : Le D√©fi du Si√®cle**")
    st.write("Les √©missions de dioxyde de carbone (CO2) sont au c≈ìur des pr√©occupations environnementales actuelles. Saviez-vous que les v√©hicules que nous conduisons quotidiennement jouent un r√¥le majeur dans ces √©missions ? Avec l'Agence de l'Environnement et de la Ma√Ætrise de l'√ânergie (ADEME) en France, en collaboration avec l'Union Technique de l'Automobile du motocycle et du Cycle (UTAC), nous disposons d'un tr√©sor de donn√©es collect√©es depuis 2001 sur les caract√©ristiques techniques des v√©hicules, leurs consommations de carburant et leurs √©missions polluantes.")
    st.subheader("üöò **Zoom sur les Caract√©ristiques Techniques : Quels V√©hicules Polluent le Plus ?**")
    st.write("Des moteurs turbo puissants aux carrosseries a√©rodynamiques, en passant par les types de carburant utilis√©s, chaque d√©tail compte ! Par exemple, la cylindr√©e du moteur, le poids du v√©hicule, et m√™me le type de transmission peuvent tous influencer les niveaux d'√©missions de CO2. Gr√¢ce √† notre analyse de ce vaste jeu de donn√©es de 2013, nous allons d√©nicher les v√©hicules les plus gourmands en CO2, pr√©dire les futures tendances de pollution, et comprendre quels √©l√©ments techniques exacerbent ces √©missions.")
    st.subheader("üîç **Pourquoi Tout Cela Est-il Excitant ?**")
    st.write("Imaginez pouvoir anticiper la pollution des futurs mod√®les de voitures avant m√™me qu'ils ne soient sur le march√© ! Nos analyses ne sont pas seulement acad√©miques ; elles ont le potentiel de transformer les politiques environnementales et de guider des choix de consommation plus verts. En identifiant les v√©hicules les plus polluants et en comprenant les caract√©ristiques qui amplifient ces √©missions, nous contribuons √† un avenir o√π chaque choix de v√©hicule peut √™tre plus conscient et durable.")
    st.subheader("üéâ **Rejoignez-nous dans cette Exploration Dynamique !**")
    st.write("Pr√©parez-vous √† une exploration riche en d√©couvertes et en donn√©es. Ensemble, d√©cryptons les secrets des v√©hicules et contribuons √† r√©duire notre empreinte carbone. Chaque petit pas compte, et ce projet est notre fa√ßon de rouler vers un avenir plus propre et plus respectueux de notre plan√®te.")
    st.header("**Alors, pr√™t √† embarquer dans cette aventure √©colo ?** üöÄüåø")
   
if page == pages[1]:
    st.title("Contexte du Projet")
    st.write("**Les projets : Identifier les v√©hicules qui √©mettent le plus de CO2 est important pour identifier les caract√©ristiques techniques qui jouent un r√¥le dans la pollution. Pr√©dire √† l‚Äôavance cette pollution permet de pr√©venir dans le cas de l‚Äôapparition de nouveaux types de v√©hicules (nouvelles s√©ries de voitures par exemple)**")
    st.image("https://gcft.fr/wp-content/uploads/2017/02/ademe-logo.jpg", caption = "Logo de l'ADEME", width = 200)
    st.write("L'Agence de l'Environnement et de la Ma√Ætrise de l'Energie (ADEME) est une institution cl√© en France, jouant un r√¥le majeur dans la promotion de pratiques respectueuses de l'environnement et dans la gestion des ressources √©nerg√©tiques. Chaque ann√©e depuis 2001, l'ADEME collecte des donn√©es sur les v√©hicules commercialis√©s en France, en partenariat avec l'Union Technique de l'Automobile du motocycle et du Cycle (UTAC), organisme responsable de l'homologation des v√©hicules.")
    st.write("Le jeu de donn√©es : https://www.data.gouv.fr/fr/datasets/emissions-de-co2-et-de-polluants-des-vehicules-commercialises-en-france/#_")
    st.write("Ce jeu de donn√©es de 2013 offre une mine d'informations pr√©cieuses, notamment les caract√©ristiques techniques des v√©hicules, les consommations de carburant, les √©missions de dioxyde de carbone (CO2) et les √©missions de polluants de l'air, conforme √† la norme Euro en vigueur. Ces donn√©es sont essentielles pour identifier les v√©hicules les plus √©metteurs de CO2 et les plus polluants, ce qui permet de comprendre les caract√©ristiques techniques influant sur la pollution.")
    st.write("Gr√¢ce √† ce jeu de donn√©es, il est possible d'entreprendre diverses analyses, telles que l'identification des v√©hicules les plus √©metteurs de CO2, la pr√©diction de la pollution pour de nouveaux types de v√©hicules, ou encore l'√©valuation de l'impact des caract√©ristiques techniques sur les √©missions polluantes. Ces analyses peuvent contribuer √† orienter les politiques environnementales et √† promouvoir des choix de consommation plus durables dans le secteur automobile.")
    st.header("Notre √©quipe :")
    st.write("### Projet r√©alis√© par Fran√ßois Vergne, Drazen Saric & Arnaud Colombel")
    st.warning("Une description de nous se trouve sur la gauche de la page.")
    
if page == pages[2]:
    st.title("Exploration des donn√©es")
    st.write("Voici un √©chantillon des donn√©es brutes utilis√©es dans notre analyse. Les 20 premi√®res lignes du jeu de donn√©es sont affich√©es ci-dessous :")
    st.dataframe(donnees2013.head(20))
    st.write("### Statistiques Descriptives des Donn√©es")
    st.write("Les statistiques descriptives ci-dessous r√©sument les principales caract√©ristiques des donn√©es num√©riques du jeu de donn√©es, telles que la moyenne, l'√©cart type, les valeurs minimales et maximales :")
    st.write(donnees2013.describe()) 
    buffer = io.StringIO()
    donnees2013.info(buf=buffer)
    info_str = buffer.getvalue()
    st.write("### Informations Compl√®tes sur le Jeu de Donn√©es")
    st.write("Les informations suivantes d√©crivent la structure compl√®te du jeu de donn√©es, y compris le type de chaque colonne et le nombre de valeurs manquantes (NaN). Nous remarquons qu'il y a un nombre significatif de valeurs manquantes, ce qui n√©cessitera une attention particuli√®re pour le traitement des donn√©es :")
    st.text(info_str)
    st.write("")
    if st.button("Certains noms de colonne ont des d√©signations techniques, souhaitez-vous connaitre la d√©signation de chacune ?"):
        st.write("**Marque**: Le fabricant du v√©hicule.")
        st.write("**Mod√®le dossier**: Nom du mod√®le de v√©hicule dans le dossier.")
        st.write("**Mod√®le UTAC**: Nom du mod√®le de v√©hicule selon l'UTAC.")
        st.write("**D√©signation commerciale**: D√©nomination commerciale du v√©hicule.")
        st.write("**CNIT**: Num√©ro d'identification du v√©hicule.")
        st.write("**Type Variante Version (TVV)**: Classification du type de variante et version du v√©hicule.")
        st.write("**Carburant**: Type de carburant utilis√© par le v√©hicule.")
        st.write("**Hybride**: Indique si le v√©hicule est hybride ou non.")
        st.write("**Puissance administrative**: Puissance administrative du v√©hicule en chevaux fiscaux.")
        st.write("**Puissance maximale (kW)**: Puissance maximale du v√©hicule en kilowatts.")
        st.write("**Bo√Æte de vitesse**: Type de bo√Æte de vitesse du v√©hicule.")
        st.write("**Consommation urbaine (l/100km)**: Consommation de carburant en milieu urbain en litres pour 100 kilom√®tres.")
        st.write("**Consommation extra-urbaine (l/100km)**: Consommation de carburant hors agglom√©ration en litres pour 100 kilom√®tres.")
        st.write("**Consommation mixte (l/100km)**: Consommation de carburant mixte en litres pour 100 kilom√®tres.")
        st.write("**CO2 (g/km)**: √âmissions de dioxyde de carbone par kilom√®tre parcouru.")
        st.write("**CO type I (g/km)**: √âmissions de monoxyde de carbone de type I par kilom√®tre parcouru.")
        st.write("**HC (g/km)**: √âmissions d'hydrocarbures par kilom√®tre parcouru.")
        st.write("**NOX (g/km)**: √âmissions d'oxydes d'azote par kilom√®tre parcouru.")
        st.write("**HC+NOX (g/km)**: √âmissions combin√©es d'hydrocarbures et d'oxydes d'azote par kilom√®tre parcouru.")
        st.write("**Particules (g/km)**: √âmissions de particules par kilom√®tre parcouru.")
        st.write("**masse vide euro min (kg)**: Masse vide minimale du v√©hicule en kilogrammes selon la norme euro.")
        st.write("**masse vide euro max (kg)**: Masse vide maximale du v√©hicule en kilogrammes selon la norme euro.")
        st.write("**Norme UE**: Le champ V9 carte grise indique la norme Euro du v√©hicule.La norme Euro est un syst√®me de classification des moteurs qui se base sur les √©missions de polluants.")
        st.write("**Date de mise √† jour**: Date de la derni√®re mise √† jour des donn√©es.")
        st.write("**Carrosserie**: Type de carrosserie du v√©hicule.")
        st.write("**gamme**: Gamme du v√©hicule.")
        if st.button("Fermer la liste des colonnes"):
            st.write()
    if st.button("Les types de carburant ont une codification, souhaitez-vous la voir ?"):
        st.write("**ES**: Essence.")
        st.write("**GO**: Diesel (gazole).")
        st.write("**EH**: V√©hicule hybride non rechargeable.")
        st.write("**EE**: Essence-√©lectricit√© (hybride rechargeable).")
        st.write("**EL**: √âlectricit√©.")
        st.write("**GH**: Diesel-√©lectricit√© non rechargeable.")
        st.write("**ES/GP**: Essence-GPL.")
        st.write("**GP/ES**: Essence-GPL.")
        st.write("**ES/GN**: Essence-gaz naturel.")
        st.write("**GN/ES**: Essence-gaz naturel.")
        st.write("**FE**: Super√©thanol E85.")
        st.write("**GN**: Gaz naturel.")
        st.write("**GL**: Diesel-√©lectricit√© rechargeable.")
        if st.button("Fermer la liste des carburants"):
            st.write()
    st.write(" ")
    st.write("## Biais du Dataset")
    st.write("""
    - **Anciennet√© des donn√©es :** Le jeu de donn√©es date de 2013, les donn√©es ne sont plus dans les standards actuels.
    - **Faux NaN :** Certaines valeurs NaN sont en r√©alit√© des valeurs z√©ro, par exemple pour les v√©hicules √©lectriques.
    - **Doublons :** Pr√©sence de vrais et faux doublons dans les donn√©es.
    - **D√©s√©quilibre des donn√©es :** Le jeu de donn√©es est fortement d√©s√©quilibr√© avec 83% des v√©hicules √©tant des Mercedes.
    - **Valeurs aberrantes :** Certaines entr√©es dans la variable 'Marque' ne sont pas des marques valides (ex : Quatro, Renault Tech).
    - **Valeurs extr√™mes :** N√©cessit√© de consulter des experts pour valider certaines valeurs techniques.
    """)
    st.write(" ")
    st.title("Pre-processing et feature engineering")
    st.write("### √âtape 1 : Traitement de Nom de Variable")
    st.write("""
    - **Transformation de majuscules :** Conversion des noms de variables en majuscules pour uniformiser le jeu de donn√©es.
    - **Modification d‚Äôun nom de variable :** Changement de certains noms de variables pour une meilleure clart√© et compr√©hension.
    """)
    st.write("### √âtape 2 : Conversion en Format de Date")
    st.write("""
    - **Format de date :** Une variable √©tait une date au format (mm/aa). Cette variable a √©t√© convertie au format de date appropri√©.
    """)
    st.write("### √âtape 3 : Gestion des Doublons")
    st.write("""
    - **Identification des doublons :** Le jeu de donn√©es contient 619 doublons. Il est crucial de d√©terminer s'ils sont de vrais doublons ou non.
    - **Recommandations :**
    - **Identification :** D√©finir des crit√®res pour identifier les vrais doublons.
    - **Gestion :** Supprimer ou combiner les doublons en fonction de leur impact sur les analyses.
    """)
    st.write("### √âtape 4 : Gestion des NaN")
    st.write("""
    - **Reconstitution de HC, NOX ou HC+NOX :** Lorsque 2 des 3 colonnes sont connues.
    - **V√©hicules √©lectriques :**
      Remplissage des NaN par 0 pour les colonnes CO2, CO TYPE I, HC, NOX, HC+NOX et PARTICULES.
      Remplissage des NaN par 0 pour les colonnes li√©es aux consommations (urbaine, mixte, extra-urbaine).
    - **V√©hicules Essence-√©lectricit√© (hybride rechargeable) :**
      En Urbain : 100% en √©lectrique donc 0.
      En Extra-Urbain : 5,5L (d'apr√®s les sites et commentaires, c'est entre 5,2L et 6L pour les 3 v√©hicules).
    - **Autres NaN :**
      Remplacement des NaN de CO TYPE I, HC, NOX, HC+NOX et PARTICULES par la m√©diane en fonction du carburant.
      Remplacement des NaN dans la colonne PARTICULES par la m√©diane.
    """)
    st.write("### √âtape 5 : Encodage des Donn√©es")
    st.write("""
    - **Utilisation de OrdinalEncoder :** En attribuant des valeurs num√©riques ordonn√©es, il permet de pr√©server la relation hi√©rarchique entre les cat√©gories.
    - **Analyse de corr√©lation :** Cela nous permet d'analyser la corr√©lation entre les variables √† l'aide d'une heatmap et de formater le jeu de donn√©es pour les √©tapes ult√©rieures du machine learning.
    """)
    st.write("### √âtape 6 : Standardisation (Normalisation Z-Score)")
    st.write("""
    - **Utilisation de StandardScaler :** Permet de normaliser les caract√©ristiques de nos donn√©es en les recentrant autour de 0 avec une variance de 1.
    - **Importance :** Cette normalisation est cruciale lorsque les caract√©ristiques des donn√©es ont des √©chelles diff√©rentes. Cela garantit que notre mod√®le de machine learning fonctionne efficacement et de mani√®re optimale.
    """)

# Pr√©traitement et encodage avec cache
@st.cache_resource
def preprocess_and_encode(donnees2013):        
    #Gestion des Nan
    donnees2013 = donnees2013.rename(columns=lambda x: x.upper())
    donnees2013 = donnees2013.rename({'CHAMP V9': 'NORME UE'}, axis = 1)
    # Reconstitution de HC, NOX ou HC+NOX lorsque 2 des 3 colonnes sont connues
    select_col = ['HC (G/KM)', 'NOX (G/KM)', 'HC+NOX (G/KM)']
    select_donnees = donnees2013[donnees2013.isna().any(axis=1)][select_col]
    donnees2013.loc[donnees2013['HC+NOX (G/KM)'].isna(), 'HC+NOX (G/KM)'] = (select_donnees['HC (G/KM)'] + select_donnees['NOX (G/KM)'])
    donnees2013.loc[donnees2013['HC (G/KM)'].isna(), 'HC (G/KM)'] = (select_donnees['HC+NOX (G/KM)'] - select_donnees['NOX (G/KM)'])
    donnees2013.loc[donnees2013['HC+NOX (G/KM)'].isna(), 'NOX (G/KM)'] = (select_donnees['HC+NOX (G/KM)'] - select_donnees['HC (G/KM)'])

    #Pour les v√©hicules √©lectriques, remplissage de NaN par 0 pour les colonnes CO2, CO TYPE I, HC, NOX, HC+NOX et PARTICULES
    donnees2013.loc[donnees2013['CARBURANT'] == 'EL', 'CO2 (G/KM)'] = donnees2013[donnees2013['CARBURANT'] == 'EL']['CO2 (G/KM)'].fillna(0)
    donnees2013.loc[donnees2013['CARBURANT'] == 'EL', 'CO TYPE I (G/KM)'] = donnees2013[donnees2013['CARBURANT'] == 'EL']['CO2 (G/KM)'].fillna(0)
    donnees2013.loc[donnees2013['CARBURANT'] == 'EL', 'HC (G/KM)'] = donnees2013[donnees2013['CARBURANT'] == 'EL']['HC (G/KM)'].fillna(0)
    donnees2013.loc[donnees2013['CARBURANT'] == 'EL', 'NOX (G/KM)'] = donnees2013[donnees2013['CARBURANT'] == 'EL']['NOX (G/KM)'].fillna(0)
    donnees2013.loc[donnees2013['CARBURANT'] == 'EL', 'HC+NOX (G/KM)'] = donnees2013[donnees2013['CARBURANT'] == 'EL']['HC+NOX (G/KM)'].fillna(0)
    donnees2013.loc[donnees2013['CARBURANT'] == 'EL', 'PARTICULES (G/KM)'] = donnees2013[donnees2013['CARBURANT'] == 'EL']['PARTICULES (G/KM)'].fillna(0)

    #Pour les v√©hicules √©lectriques, remplissage de NaN par 0 pour les colonnes li√©es aux consommations (urbaine, mixte, extra-urbaine)
    donnees2013.loc[donnees2013['CARBURANT'] == 'EL', 'CONSOMMATION URBAINE (L/100KM)'] = donnees2013[donnees2013['CARBURANT'] == 'EL']['CONSOMMATION URBAINE (L/100KM)'].fillna(0)
    donnees2013.loc[donnees2013['CARBURANT'] == 'EL', 'CONSOMMATION EXTRA-URBAINE (L/100KM)'] = donnees2013[donnees2013['CARBURANT'] == 'EL']['CONSOMMATION EXTRA-URBAINE (L/100KM)'].fillna(0)
    donnees2013.loc[donnees2013['CARBURANT'] == 'EL', 'CONSOMMATION MIXTE (L/100KM)'] = donnees2013[donnees2013['CARBURANT'] == 'EL']['CONSOMMATION MIXTE (L/100KM)'].fillna(0)

    #Pour les v√©hicules Essence-√©lectricit√© (hybride rechargeable), il y a 3 lignes :
    # On consid√®re qu'en Urbain => 100% en √©lectrique donc 0
    # On consid√®re qu'en Extra-Urbain => 5,5L (d'apr√®s les sites et commentaires, c'est entre 5,2L et 6L pour les 3 v√©hicules)
    donnees2013.loc[donnees2013['CARBURANT'] == 'EE', 'CONSOMMATION URBAINE (L/100KM)'] = donnees2013[donnees2013['CARBURANT'] == 'EE']['CONSOMMATION URBAINE (L/100KM)'].fillna(0)
    donnees2013.loc[donnees2013['CARBURANT'] == 'EE', 'CONSOMMATION EXTRA-URBAINE (L/100KM)'] = donnees2013[donnees2013['CARBURANT'] == 'EE']['CONSOMMATION EXTRA-URBAINE (L/100KM)'].fillna(5.5)

    #Remplacer les NaN de 'CO TYPE I (G/KM)' par la m√©diane en fonction du carburant
    for carb in donnees2013.loc[donnees2013[['CO TYPE I (G/KM)']].isna().all(axis=1)]['CARBURANT'].unique():
        donnees2013.loc[(donnees2013['CO TYPE I (G/KM)'].isna()) & (donnees2013['CARBURANT'] == carb), ['CO TYPE I (G/KM)']] = donnees2013.loc[(donnees2013['CO TYPE I (G/KM)'].isna()) & (donnees2013['CARBURANT'] == carb), ['CO TYPE I (G/KM)']].fillna(donnees2013[donnees2013['CARBURANT'] == carb][['CO TYPE I (G/KM)']].median())

    #Remplacer les NaN de 'HC (G/KM)' par la m√©diane en fonction du carburant
    for carb in donnees2013.loc[donnees2013[['HC (G/KM)']].isna().all(axis=1)]['CARBURANT'].unique():
        donnees2013.loc[(donnees2013['HC (G/KM)'].isna()) & (donnees2013['CARBURANT'] == carb), ['HC (G/KM)']] = donnees2013.loc[(donnees2013['HC (G/KM)'].isna()) & (donnees2013['CARBURANT'] == carb), ['HC (G/KM)']].fillna(donnees2013[donnees2013['CARBURANT'] == carb][['HC (G/KM)']].median())

    #Remplacer les NaN de 'NOX (G/KM)' par la m√©diane en fonction du carburant
    for carb in donnees2013.loc[donnees2013[['NOX (G/KM)']].isna().all(axis=1)]['CARBURANT'].unique():
        donnees2013.loc[(donnees2013['NOX (G/KM)'].isna()) & (donnees2013['CARBURANT'] == carb), ['NOX (G/KM)']] = donnees2013.loc[(donnees2013['NOX (G/KM)'].isna()) & ( donnees2013['CARBURANT'] == carb), ['NOX (G/KM)']].fillna(donnees2013[donnees2013['CARBURANT'] == carb][['NOX (G/KM)']].median())

    #Remplacer les NaN de 'HC+NOX (G/KM)' par la m√©diane en fonction du carburant
    for carb in donnees2013.loc[donnees2013[['HC+NOX (G/KM)']].isna().all(axis=1)]['CARBURANT'].unique():
        donnees2013.loc[(donnees2013['HC+NOX (G/KM)'].isna()) & (donnees2013['CARBURANT'] == carb), ['HC+NOX (G/KM)']] = donnees2013.loc[(donnees2013['HC+NOX (G/KM)'].isna()) & (donnees2013['CARBURANT'] == carb), ['HC+NOX (G/KM)']].fillna(donnees2013[donnees2013['CARBURANT'] == carb][['HC+NOX (G/KM)']].median())

    #Remplacer les NaN de 'PARTICULES (G/KM)' par la m√©diane en fonction du carburant
    for carb in donnees2013.loc[donnees2013[['PARTICULES (G/KM)']].isna().all(axis=1)]['CARBURANT'].unique():
        donnees2013.loc[(donnees2013['PARTICULES (G/KM)'].isna()) & (donnees2013['CARBURANT'] == carb), ['PARTICULES (G/KM)']] = donnees2013.loc[(donnees2013['PARTICULES (G/KM)'].isna()) & (donnees2013['CARBURANT'] == carb), ['PARTICULES (G/KM)']].fillna(donnees2013[donnees2013['CARBURANT'] == carb][['PARTICULES (G/KM)']].median())

    #Remplacer les NaN restant sur la colonne 'PARTICULES (G/KM)' par la m√©diane sachant que sur 43% des reponses sont 0 et 40% sont 0,001
    donnees2013.loc[(donnees2013['PARTICULES (G/KM)'].isna()), ['PARTICULES (G/KM)']] = donnees2013.loc[(donnees2013['PARTICULES (G/KM)'].isna()), ['PARTICULES (G/KM)']].fillna(donnees2013['PARTICULES (G/KM)'].median())
       
    #Entrainement du mod√®le en dehors de la page pour avoir les m√™mes donn√©es en la mod√©lisation 1 et 2
    #Nettoyage du nombre de colonne
    donnees2013_ml = donnees2013.drop([
        'MARQUE',
        'MOD√àLE DOSSIER',
        'MOD√àLE UTAC',
        'D√âSIGNATION COMMERCIALE',
        'CNIT',
        'TYPE VARIANTE VERSION (TVV)',
        'BO√éTE DE VITESSE',
        'CO TYPE I (G/KM)',
        'HC (G/KM)',
        'NOX (G/KM)',
        'HC+NOX (G/KM)',
        'PARTICULES (G/KM)',
        'NORME UE',
        'DATE DE MISE √Ä JOUR'
    ], axis=1)

    #Isoler la valeur cible
    y = donnees2013_ml['CO2 (G/KM)']
    X = donnees2013_ml.drop(['CO2 (G/KM)'], axis = 1)

    #S√©paration du jeu de donn√©e pour l'entrainement et le test. On garde 20% des donn√©es pour les tests.
    from sklearn.model_selection import train_test_split

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)

    from sklearn.preprocessing import OneHotEncoder, OrdinalEncoder

    #utilisation du OneHotEncoder pour la varbiable 'Hybride' car c'est une variable binaire
    ohe = OneHotEncoder(drop='first', sparse_output=False, handle_unknown='ignore')
    cat_hybride_train = ohe.fit_transform(X_train[['HYBRIDE']])
    cat_hybride_test = ohe.transform(X_test[['HYBRIDE']])

    # Encodage de 'CARBURANT', 'CARROSSERIE', 'GAMME' avec OrdinalEncoder
    oe = OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)
    cat_oe = ['CARBURANT', 'CARROSSERIE', 'GAMME']
    cat_oe_train = oe.fit_transform(X_train[cat_oe])
    cat_oe_test = oe.transform(X_test[cat_oe])


    # Concat√©ner les colonnes encod√©es avec les autres colonnes
    X_train = pd.concat([
        pd.DataFrame(cat_hybride_train, index=X_train.index, columns=['HYBRIDE']),
        pd.DataFrame(cat_oe_train, index=X_train.index, columns=['CARBURANT', 'CARROSSERIE', 'GAMME']),
        X_train.drop(['HYBRIDE', 'CARBURANT', 'CARROSSERIE', 'GAMME'], axis=1)], axis=1)


    X_test = pd.concat([
        pd.DataFrame(cat_hybride_test, index=X_test.index, columns=['HYBRIDE']),
        pd.DataFrame(cat_oe_test, index=X_test.index, columns=['CARBURANT', 'CARROSSERIE', 'GAMME']),
        X_test.drop(['HYBRIDE','CARBURANT', 'CARROSSERIE', 'GAMME'], axis=1)], axis=1)


    #Le StandardScaler nous permet d'appliquer la transformation Z-Score √† nos donn√©es.
    from sklearn.preprocessing import StandardScaler
    sc = StandardScaler()
    X_train = sc.fit_transform(X_train)
    X_test = sc.transform(X_test)

    return X_train, X_test, y_train, y_test, ohe, oe, sc, cat_oe, donnees2013, donnees2013_ml

X_train, X_test, y_train, y_test, ohe, oe, sc, cat_oe, donnees2013, donnees2013_ml = preprocess_and_encode(donnees2013)

if page == pages[3]:
    st.write("## Observons les donn√©es gr√¢ce √† la Data Visualisation")
    st.write("### DataViz n¬∞1")
    fig = px.histogram(donnees2013, x='CO2 (G/KM)', title='Distribution des √©missions de CO2')
    fig.update_layout(xaxis_title='CO2 (G/KM)', yaxis_title='Count', bargap=0.2, template='plotly_white')
    st.plotly_chart(fig)
    
    
    st.write("### DataViz N¬∞2")
    st.write("Cette visualisation montre la distribution des √©missions de CO2 en fonction des diff√©rents types de carburants, r√©v√©lant que les v√©hicules utilisant le carburant ES (Essence) et FE (Flexible Fuel) ont une large gamme d'√©missions, tandis que les carburants comme EE (Electricit√©) et GL (Gaz Liqu√©fi√©) ont des √©missions significativement plus faibles. Les types de carburants GH (Hybride), EH (Hybride Essence), et GN (Gaz Naturel) affichent des distributions plus restreintes, indiquant une performance environnementale plus homog√®ne dans ces cat√©gories.")
    plt.figure(figsize=(10, 6))
    sns.violinplot(x='CARBURANT', y='CO2 (G/KM)', data = donnees2013, palette='Set2')
    plt.title('Distribution des √©missions de CO2 par type de carburant')
    plt.xlabel('Type de carburant')
    plt.ylabel('√âmissions de CO2 (g/km)')
    plt.xticks(rotation=45)
    st.pyplot(plt)

    st.write("### DataViz N¬∞3")
    st.write("L'analyse du nuage de points r√©v√®le que plus la puissance du moteur est √©lev√©e et plus il consomme, plus les √©missions de Co2 associ√©es sont √©lev√©es.")
    # Nettoyer les donn√©es
    data_nettoyer = donnees2013.dropna(subset=['CO2 (G/KM)'])

    # D√©finir les variables pour le nuage de points
    x = data_nettoyer['PUISSANCE MAXIMALE (KW)']
    y = data_nettoyer['CONSOMMATION MIXTE (L/100KM)']
    co2 = data_nettoyer['CO2 (G/KM)']

    # Cr√©er le nuage de points avec Plotly
    fig = px.scatter(data_nettoyer, x='PUISSANCE MAXIMALE (KW)', y='CONSOMMATION MIXTE (L/100KM)',
                    color='CO2 (G/KM)', color_continuous_scale='RdBu_r', 
                    title='Puissance maximale vs Consommation de carburant Vs CO2',
                    labels={'PUISSANCE MAXIMALE (KW)': 'Puissance maximale du moteur (kW)', 
                            'CONSOMMATION MIXTE (L/100KM)': 'Consommation mixte de carburant (l/100km)',
                            'CO2 (G/KM)': '√âmissions de CO2 (g/km)'})

    # Ajouter une r√©gression lin√©aire
    X = x.values.reshape(-1, 1)
    reg = LinearRegression().fit(X, y)
    data_nettoyer['Regression Line'] = reg.predict(X)

    fig.add_trace(go.Scatter(
        x=data_nettoyer['PUISSANCE MAXIMALE (KW)'],
        y=data_nettoyer['Regression Line'],
        mode='lines',
        name='Ligne de r√©gression',
        line=dict(color='gray')
    ))

    # Afficher le graphique dans Streamlit
    st.plotly_chart(fig)

    st.write("### DataViz N¬∞4")
    co2_by_marque = donnees2013.groupby('MARQUE')['CO2 (G/KM)'].mean().sort_values()
    co2_by_marque = donnees2013.groupby('MARQUE')['CO2 (G/KM)'].mean().sort_values().reset_index()
    fig = px.bar(co2_by_marque, x='CO2 (G/KM)', y='MARQUE', orientation='h',
                title='Comparaison des √©missions de CO2 par marque de v√©hicule',
                labels={'CO2 (G/KM)': '√âmissions de CO2 moyennes (g/km)', 'MARQUE': 'Marque'},
                color_discrete_sequence=['skyblue'])
    fig.update_layout(xaxis=dict(showgrid=True, gridcolor='LightGrey'))
    st.plotly_chart(fig)

    st.write("### DataViz N¬∞5")
    st.write("Nous observons sur ce graphique une corr√©lation entre la masse du v√©hicule et les √©missions de CO2")
    fig = px.scatter(donnees2013, x='MASSE VIDE EURO MAX (KG)', y='CO2 (G/KM)', 
                 title="Relation entre les √©missions de CO2 (G/KM) et la masse des v√©hicules",
                 labels={'MASSE VIDE EURO MAX (KG)': 'Masse des v√©hicules (KG)', 'CO2 (G/KM)': '√âmissions de CO2 (G/KM)'},
                 color_discrete_sequence=['#A7001E'], width=2000, height=800)

    fig.update_traces(marker=dict(size=6))
    st.plotly_chart(fig)

    st.write("### DataViz N¬∞6")
    st.write("Ce graphique permet d'observer la corr√©lation entre les diff√©rentes variables. Si nous analysons la variable CO2 (g/km), nous remarquons que les variables les plus corr√©l√©es sont les 3 variables de consommations (mixte, urbaine et extra-urbaine), ensuite, la masse du v√©hicule est aussi tr√®s important (0.75 et 0.75 de coefficient) puis arrive ensuite, le mod√®le (dossier et UTAC) puis le type de carrosserie. Ce grpahique nous confirme l'analyse pr√©c√©dente sur la corr√©lation entre le type de carburant et les √©missions de NOX.")
    oe = OrdinalEncoder()
    # Encodage des donn√©es 2013 et reconstruction en df
    donnees2013_cor = oe.fit_transform(donnees2013)
    donnees2013_cor  = pd.DataFrame(donnees2013_cor, columns=donnees2013.columns)

    # corr√©lation
    correlation_matrix = donnees2013_cor.corr()
    fig = px.imshow(correlation_matrix, text_auto=True, color_continuous_scale='turbo', aspect='auto')
    fig.update_layout(title='Matrice de corr√©lation', width=4000, height=1000)
    st.plotly_chart(fig)

    st.write("### DataViz bonus")
    st.write("Nous finissons notre datavisualisation sur ce graphique afin d'attirer l'attention sur un d√©s√©quilibre du jeu de donn√©es. En effet, nous remarquons sans difficult√© que 2 types de carburant ont le monopole. Le Gasoil pour 84,2% et l'Essence pour 13,7%.")
    carburant_counts = donnees2013['CARBURANT'].value_counts()
    carburant_counts_df = carburant_counts.reset_index()
    carburant_counts_df.columns = ['CARBURANT', 'COUNT']
    fig = px.pie(carburant_counts_df, values='COUNT', names='CARBURANT', title='R√©partition des v√©hicules par type de carburant')
    st.plotly_chart(fig)

 

# Entra√Ænement et cache des mod√®les
@st.cache_resource
def train_decision_tree_classifier(X_train, y_train):
    dt_clf = DecisionTreeClassifier()
    dt_clf.fit(X_train, y_train)
    return dt_clf

dt_clf = train_decision_tree_classifier(X_train, y_train)

@st.cache_resource
def train_decision_tree_regressor(X_train, y_train):
    dt_reg = DecisionTreeRegressor()
    dt_reg.fit(X_train, y_train)
    return dt_reg

dt_reg = train_decision_tree_regressor(X_train, y_train)

@st.cache_resource
def train_linear_regression(X_train, y_train):
    lr = LinearRegression()
    lr.fit(X_train, y_train)
    return lr

lr = train_linear_regression(X_train, y_train)

@st.cache_resource
def train_logistic_regression(X_train, y_train):
    logr = LogisticRegression()
    logr.fit(X_train, y_train)
    return logr

logr = train_logistic_regression(X_train, y_train)


# Sauvegarde du mod√®le avec Joblib
joblib.dump(dt_clf, 'dt_clf_model.pkl')
joblib.dump(dt_reg, 'dt_reg_model.pkl')
joblib.dump(lr, 'lr_model.pkl')
joblib.dump(logr, 'logr_model.pkl')

# Chargement du mod√®le
dt_clf = joblib.load('dt_clf_model.pkl')
dt_reg = joblib.load('dt_reg_model.pkl')
lr = joblib.load('lr_model.pkl')
logr = joblib.load('logr_model.pkl')


# Calcul des scores pour chaque mod√®le apr√®s l'entra√Ænement

# Pour l'arbre de d√©cision
train_score_clf = round(dt_clf.score(X_train, y_train),4)
test_score_clf = round(dt_clf.score(X_test, y_test),4)

# Pour l'arbre de r√©gression
train_score_reg = round(dt_reg.score(X_train, y_train),4)
test_score_reg = round(dt_reg.score(X_test, y_test),4)

# Pour la r√©gression lin√©aire
train_score_lr = round(lr.score(X_train, y_train),4)
test_score_lr = round(lr.score(X_test, y_test),4)

# Pour la r√©gression logistique
train_score_logr = round(logr.score(X_train, y_train),4)
test_score_logr = round(logr.score(X_test, y_test),4)

# Calcul des m√©triques pour les mod√®les
def calculate_metrics(_model, X_test, y_test):
    y_pred = _model.predict(X_test)
    mae = mean_absolute_error(y_test, y_pred)
    mse = mean_squared_error(y_test, y_pred)
    rmse = np.sqrt(mse)
    return mae, mse, rmse, y_pred

mae_clf, mse_clf, rmse_clf, y_pred_test_clf = calculate_metrics(dt_clf, X_test, y_test)
mae_reg, mse_reg, rmse_reg, y_pred_test_reg = calculate_metrics(dt_reg, X_test, y_test)
mae_lr, mse_lr, rmse_lr, y_pred_test_lr = calculate_metrics(lr, X_test, y_test)
mae_logr, mse_logr, rmse_logr, y_pred_test_logr = calculate_metrics(logr, X_test, y_test)
 
#97% √† 98% des donn√©es ont un carburant 'ES' ou 'GO'. On pr√©pare donc un test pour observer les r√©sultats sur les donn√©es en d√©hors de ces 2 types de carburant.
#Nous allons r√©perer les 2 valeurs ayant un nombre d'occurences √©lev√© pour rep√©rer les 'ES' et 'GO' pour ensuite les enlever dans notre comparaison de y_test et y_pred_test
# Calcul des m√©triques pour les mod√®les


def calculate_metrics_horsGOES(_model, X_test, y_test):
    # Obtenir les valeurs uniques et leurs occurrences pour la deuxi√®me colonne de X_test
    valeurs_uniques, nombre_occurrences = np.unique(X_test[:, 1], return_counts=True)

    # Trouver les deux valeurs avec les occurrences les plus √©lev√©es
    indices_top2 = np.argsort(nombre_occurrences)[-2:]
    valeurs_top2 = valeurs_uniques[indices_top2]

    # Filtrer X_test pour exclure ces deux valeurs
    ind_x_test_horsGOES = np.where((X_test[:, 1] != valeurs_top2[0]) & (X_test[:, 1] != valeurs_top2[1]))[0]

    # Extraire les lignes sp√©cifiques de X_test
    X_test_horsGOES = X_test[ind_x_test_horsGOES]

    # Convertir y_test en numpy array pour √©viter les probl√®mes d'index
    y_test_array = y_test.to_numpy()

    # Extraire les valeurs correspondantes de y_test
    y_test_horsGOES = y_test_array[ind_x_test_horsGOES]

    # Pr√©dire les valeurs pour X_test_horsGOES avec le mod√®le donn√©
    y_pred_horsGOES = _model.predict(X_test_horsGOES)

    # Calcul des m√©triques
    mae_horsGOES = mean_absolute_error(y_test_horsGOES, y_pred_horsGOES)
    mse_horsGOES = mean_squared_error(y_test_horsGOES, y_pred_horsGOES)
    rmse_horsGOES = np.sqrt(mse_horsGOES)

    return mae_horsGOES, mse_horsGOES, rmse_horsGOES

# Calcul des m√©triques hors 'ES' et 'GO' pour chaque mod√®le
mae_clf_horsGOES, mse_clf_horsGOES, rmse_clf_horsGOES = calculate_metrics_horsGOES(dt_clf, X_test, y_test)
mae_reg_horsGOES, mse_reg_horsGOES, rmse_reg_horsGOES = calculate_metrics_horsGOES(dt_reg, X_test, y_test)
mae_lr_horsGOES, mse_lr_horsGOES, rmse_lr_horsGOES = calculate_metrics_horsGOES(lr, X_test, y_test)
mae_logr_horsGOES, mse_logr_horsGOES, rmse_logr_horsGOES = calculate_metrics_horsGOES(logr, X_test, y_test)

if page == pages[4]:
    st.header("Mod√©lisation 1 et analyse de performance")
    st.warning("""
    Lors de la phase d'exploration et de datavisualisation, nous avons identifi√© nos variables explicatives notamment **la consommation**, **la masse du v√©hicule** et **le type de carburant**. Nous allons donc nettoyer notre jeu de donn√©es pour ne conserver que ces variables. De plus, nous isolerons la variable cible **'CO2 (g/km)'**. Ensuite, nous avons effectu√© les phases de pr√©traitement et d'ing√©nierie des caract√©ristiques, en r√©duisant le nombre de variables pour ne garder que les explicatives.

    Pour garantir un bon entra√Ænement de notre mod√®le, nous allons diviser le jeu de donn√©es en deux parties : **80 % pour l'entra√Ænement** et **20 % pour les tests**.
    """)

    st.write("Pour comparer les mod√®les, la Mean Absolute Error (MAE) a √©t√© choisie comme m√©trique principale. Elle a √©t√© s√©lectionn√©e pour plusieurs raisons. Tout d'abord, son interpr√©tabilit√© : la MAE a la m√™me unit√© que la variable cible (g/km de CO2), ce qui permet de comprendre directement l'ampleur des erreurs de pr√©diction. De plus, elle est moins sensible aux grandes erreurs de pr√©diction par rapport √† la Mean Squared Error (MSE), ce qui la rend plus robuste aux outliers. Pour obtenir une √©valuation compl√®te du mod√®le, d'autres m√©triques de performance ont √©galement √©t√© utilis√©es. La Mean Squared Error (MSE) calcule la moyenne des diff√©rences mises au carr√© entre les vraies valeurs et les valeurs pr√©dites. Bien que moins interpr√©table que la MAE, elle p√©nalise davantage les grandes erreurs, ce qui peut √™tre utile pour certaines applications. La Root Mean Squared Error (RMSE), qui est la racine carr√©e de la MSE, combine les avantages de la MSE et de l'interpr√©tabilit√© car elle a la m√™me unit√© que la variable cible. Ces m√©triques suppl√©mentaires ont permis de mieux comprendre les performances globales du mod√®le.")
    st.write("Mean Absolute Error (MAE) : C'est la moyenne des diff√©rences absolues entre les vraies valeurs et les valeurs pr√©dites du mod√®le. Elle est facilement interpr√©table au regard de la variable cible, car elle a la m√™me unit√©.")
    st.write("Mean Squared Error (MSE) : C'est la moyenne des diff√©rences mises au carr√© entre les vraies valeurs et les valeurs pr√©dites de la variable cible. Elle n'est pas dans la m√™me unit√© que la variable cible, ce qui rend son interpr√©tation plus complexe. Cette m√©trique p√©nalise davantage les grandes erreurs que la MAE. Elle est donc int√©ressante lorsque nous souhaitons absolument √©viter ces cas.")
    st.write("Root Mean Squared Error (RMSE) : C'est la racine carr√©e de la Mean Squared Error. Elle p√©nalise √©galement davantage les grands √©carts de pr√©diction. Elle a la m√™me unit√© que la variable cible donc elle sera plus interpr√©table que la MSE.")
    st.warning("""
    97% √† 98% des donn√©es ont un carburant 'ES' ou 'GO'. Si nos mod√®les sont tr√®s performant pour ces 2 types de carburant, ils auront des scores proches de 97% √† 98% de bonnes r√©ponses.
    Or, ils peuvent donner de mauvaises pr√©dictions sur les autres types de carburant. Donc, nous observerons aussi les m√©triques en excluant ces 2 types de carburant.""")

    # Affichage des r√©sultats de l'arbre de d√©cision dans Streamlit
    st.write("## Arbre de d√©cision")
    st.write(f'Score sur ensemble train: {train_score_clf}')
    st.write(f'Score sur ensemble test: {test_score_clf}')
    st.write("La m√©thode score est une m√©trique qui va comparer les r√©sultats de pr√©dictions de votre jeu de donn√©es X par rapport √† y. Nous pouvons remarquer un faible √©cart de score entre le jeu d'entrainement et le jeu de test. Nous ne sommes donc pas dans un cas d'overfitting. De plus, le score sur le jeu de test est proche de 1 (0,96), nous pouvons donc d√©duire que notre mod√®le est performant.")
    st.write("MAE =", round(mae_clf, 3))
    st.write("MSE =", round(mse_clf, 3))
    st.write("RMSE =", round(rmse_clf, 3))
    st.write("Observons maintenant la performance du mod√®le sur les v√©hicules n'√©tant pas au carburant essence ou gasoil")
    st.write("MAE =", round(mae_clf_horsGOES, 3))
    st.write("MSE =", round(mse_clf_horsGOES, 3))
    st.write("RMSE =", round(rmse_clf_horsGOES, 3))

    # Affichage des r√©sultats de l'arbre de r√©gression dans Streamlit
    st.write("## Arbre de r√©gression")
    st.write(f'Score sur ensemble train: {train_score_reg}')
    st.write(f'Score sur ensemble test: {test_score_reg}')
    st.write("Encore, nous pouvons remarquer un faible √©cart de score entre le jeu d'entrainement et le jeu de test. La performance est aussi tr√®s bonne.")
    st.write("MAE =", round(mae_reg, 3))
    st.write("MSE =", round(mse_reg, 3))
    st.write("RMSE =", round(rmse_reg, 3))
    st.write("Observons maintenant la performance du mod√®le sur les v√©hicules n'√©tant pas au carburant essence ou gasoil")
    st.write("MAE =", round(mae_reg_horsGOES, 3))
    st.write("MSE =", round(mse_reg_horsGOES, 3))
    st.write("RMSE =", round(rmse_reg_horsGOES, 3))

    # Affichage des r√©sultats de la r√©gression lin√©aire dans Streamlit 
    st.write("## R√©gression lin√©aire")
    st.write(f'Score sur ensemble train: {train_score_lr}')
    st.write(f'Score sur ensemble test: {test_score_lr}')
    st.write("Encore, nous pouvons remarquer un faible √©cart de score entre le jeu d'entrainement et le jeu de test. La performance est aussi tr√®s bonne.")
    st.write("MAE =", round(mae_lr, 3))
    st.write("MSE =", round(mse_lr, 3))
    st.write("RMSE =", round(rmse_lr, 3))
    st.write("Observons maintenant la performance du mod√®le sur les v√©hicules n'√©tant pas au carburant essence ou gasoil")
    st.write("MAE =", round(mae_lr_horsGOES, 3))
    st.write("MSE =", round(mse_lr_horsGOES, 3))
    st.write("RMSE =", round(rmse_lr_horsGOES, 3))

    # Affichage des r√©sultats de la r√©gression logistic dans Streamlit 
    st.write("## R√©gression logistique")
    st.write(f'Score sur ensemble train: {train_score_logr}')
    st.write(f'Score sur ensemble test: {test_score_logr}')
    st.write("Encore, nous pouvons remarquer un faible √©cart de score entre le jeu d'entrainement et le jeu de test. La performance est aussi tr√®s bonne.")
    st.write("MAE =", round(mae_logr, 3))
    st.write("MSE =", round(mse_logr, 3))
    st.write("RMSE =", round(rmse_logr, 3))
    st.write("Observons maintenant la performance du mod√®le sur les v√©hicules n'√©tant pas au carburant essence ou gasoil")
    st.write("MAE =", round(mae_clf_horsGOES, 3))
    st.write("MSE =", round(mse_clf_horsGOES, 3))
    st.write("RMSE =", round(rmse_clf_horsGOES, 3))


    st.warning("""
    Les mod√®les Grid Search et XGBoost n√©cessitent plusieurs minutes pour se charger. C'est pourquoi nous vous offrons la possibilit√© de les activer uniquement √† votre demande ci-dessous.
    """)
    algo_options_ml = ["Aucun Choix","Grid Search CV avec Random Forest", "Mod√®le XGBoost"]
    algo_selected_ml = st.selectbox("Choisir le mod√®le :",
                              options = algo_options_ml)
    if algo_selected_ml  == "Grid Search CV avec Random Forest":
        # Entra√Æner le mod√®le RandomForestRegressor
        rf = RandomForestRegressor(random_state=42)
        rf.fit(X_train, y_train)

        # Pr√©dictions initiales RandomForestRegressor
        y_pred_initial = rf.predict(X_test)
    
        # √âvaluation initiale RandomForestRegressor
        initial_mse = mean_squared_error(y_test, y_pred_initial)
        initial_r2 = r2_score(y_test, y_pred_initial)

        # Param√®tres pour Grid Search
        param_grid = {
            'n_estimators': [10, 20, 30],
            'max_depth': [None, 10, 20, 30],
            'min_samples_split': [2, 5, 10]
        }

        # Grid Search avec validation crois√©e
        grid_search = GridSearchCV(estimator=rf, param_grid=param_grid, cv=5, scoring='neg_mean_squared_error', n_jobs=-1)
        grid_search.fit(X_train, y_train)

        # Meilleurs param√®tres et mod√®le optimis√©
        best_rf = grid_search.best_estimator_
        y_pred_optimized = best_rf.predict(X_test)

        # √âvaluation des performances
        optimized_mse = mean_squared_error(y_test, y_pred_optimized)
        optimized_r2 = r2_score(y_test, y_pred_optimized)

        # Affichage des r√©sultats dans Streamlit
        st.write("## Grid Search CV avec Random Forest")
        st.write("Initial Mean Squared Error:", initial_mse)
        st.write("Initial R^2 Score:", initial_r2)
        st.write("Meilleurs param√®tres :", grid_search.best_params_)
        st.write("Optimized Mean Squared Error:", optimized_mse)
        st.write("Optimized R^2 Score:", optimized_r2)

    if algo_selected_ml  == "Mod√®le XGBoost":
        # Entra√Æner le mod√®le
        xgb_model = xgb.XGBRegressor(objective='reg:squarederror', random_state=42)
        xgb_model.fit(X_train, y_train)

        # Pr√©dictions
        y_pred_xgb = xgb_model.predict(X_test)

        # √âvaluation des performances
        xgb_mse = mean_squared_error(y_test, y_pred_xgb)
        xgb_r2 = r2_score(y_test, y_pred_xgb)

        # Affichage des r√©sultats dans Streamlit
        st.write("## Mod√®le XGBoost")
        st.write("Mean Squared Error (XGBoost):", xgb_mse)
        st.write("R^2 Score (XGBoost):", xgb_r2)
    


if page == pages[5]:
        st.header("Mod√©lisation 2 : Simulation pour un nouveau v√©hicule")
        
        #Choix des variables pour le v√©hicule "test" de notre mod√©lisation 2
        st.write("Veuillez renseigner le type de carburant :")
        carburant = st.selectbox('CARBURANT', ['GO', 'ES']) #, 'EH', 'GP/ES', 'ES/GP', 'ES/GN', 'GN/ES', 'FE', 'GH', 'GN', 'EL', 'EE'])

        st.write("Veuillez indiquer si le v√©hicule est hybride :")
        hybride = st.selectbox('HYBRIDE', ['oui', 'non'])

        st.write("Veuillez entrer la puissance administrative :")
        puissance_administrative = st.slider('PUISSANCE ADMINISTRATIVE', min_value=1, max_value=10, value=1)

        st.write("Veuillez entrer la puissance maximale (KW) :")
        puissance_maximale = st.slider('PUISSANCE MAXIMALE (KW)', min_value=0.0, max_value=600.0, value=0.0)

        st.write("Veuillez entrer la consommation urbaine (L/100KM) :")
        conso_urbaine = st.slider('CONSOMMATION URBAINE (L/100KM)', min_value=0.0, max_value=50.0, value=0.0)

        st.write("Veuillez entrer la consommation extra-urbaine (L/100KM) :")
        conso_extra_urbaine = st.slider('CONSOMMATION EXTRA-URBAINE (L/100KM)', min_value=0.0, max_value=50.0, value=0.0)

        st.write("Veuillez entrer la consommation mixte (L/100KM) :")
        conso_mixte = st.slider('CONSOMMATION MIXTE (L/100KG)', min_value=0.0, max_value=50.0, value=0.0)

        st.write("Veuillez entrer la masse vide minimum (KG) :")
        masse_vide_min = st.slider('MASSE VIDE EURO MIN (KG)', min_value=0, max_value=3500, value=0)

        st.write("Veuillez entrer la masse vide maximum (KG) :")
        masse_vide_max = st.slider('MASSE VIDE EURO MAX (KG)', min_value=0, max_value=3500, value=0)

        st.write("Veuillez renseigner le type de carrosserie :")
        carrosserie = st.selectbox('CARROSSERIE', ['MINIBUS', 'BERLINE', 'COUPE', 'COMBISPACE', 'BREAK', 'TS TERRAINS/CHEMINS', 'MONOSPACE COMPACT', 'MINISPACE', 'CABRIOLET', 'MONOSPACE'])

        st.write("Veuillez renseigner la gamme du v√©hicule :")
        gamme = st.selectbox('GAMME', ['MOY-SUPER', 'LUXE', 'MOY-INFER', 'INFERIEURE', 'SUPERIEURE', 'ECONOMIQUE'])

        # Enregistrement dans un tableau
        donnees_mod2 = {
            'CARBURANT': [carburant],
            'HYBRIDE': [hybride],
            'PUISSANCE ADMINISTRATIVE': [puissance_administrative],
            'PUISSANCE MAXIMALE (KW)': [puissance_maximale],
            'CONSOMMATION URBAINE (L/100KM)': [conso_urbaine],
            'CONSOMMATION EXTRA-URBAINE (L/100KM)': [conso_extra_urbaine],
            'CONSOMMATION MIXTE (L/100KM)': [conso_mixte],
            'MASSE VIDE EURO MIN (KG)': [masse_vide_min],
            'MASSE VIDE EURO MAX (KG)': [masse_vide_max],
            'CARROSSERIE': [carrosserie],
            'GAMME': [gamme]
        }

        df_mod2 = pd.DataFrame(donnees_mod2)

        #utilisation du OneHotEncoder pour la varbiable 'Hybride' car c'est une variable binaire
        cat_hybride_df_mod2 = ohe.transform(df_mod2[['HYBRIDE']])

        # Encodage de 'CARBURANT', 'CARROSSERIE', 'GAMME' avec OrdinalEncoder
        cat_oe_df_mod2 = oe.transform(df_mod2[cat_oe])


        # Concat√©ner les colonnes encod√©es avec les autres colonnes
        df_mod2 = pd.concat([
            pd.DataFrame(cat_hybride_df_mod2, index=df_mod2.index, columns=['HYBRIDE']),
            pd.DataFrame(cat_oe_df_mod2, index=df_mod2.index, columns=['CARBURANT', 'CARROSSERIE', 'GAMME']),
            df_mod2.drop(['HYBRIDE','CARBURANT', 'CARROSSERIE', 'GAMME'], axis=1)], axis=1)

        algo_options = ["Arbre de d√©cision", "Arbre de r√©gression", "R√©gression lin√©aire","R√©gression logistique"]
        algo_selected = st.selectbox("Veuillez choisir un algorythme:",
                              options = algo_options)
        
        if algo_selected == "Arbre de d√©cision":
            st.write("MAE =", round(mae_clf, 3))
            st.write("MSE =", round(mse_clf, 3))
            st.write("RMSE =", round(rmse_clf, 3))

            # G√©n√©rer la pr√©diction
            y_pred_mod2_clf = dt_clf.predict(df_mod2)
            st.header("La pr√©diction d'√©mission de CO2 (g/km) pour un v√©hicule param√©tr√© comme celui-ci est CO2 :")
            st.header(y_pred_mod2_clf[0])

        if algo_selected == "Arbre de r√©gression":
            st.write("MAE =", round(mae_reg, 3))
            st.write("MSE =", round(mse_reg, 3))
            st.write("RMSE =", round(rmse_reg, 3))

            # G√©n√©rer la pr√©diction
            y_pred_mod2_reg = dt_reg.predict(df_mod2)
            st.header("La pr√©diction d'√©mission de CO2 (g/km) pour un v√©hicule param√©tr√© comme celui-ci est CO2 :")
            st.header(y_pred_mod2_reg[0])

        if algo_selected == "R√©gression lin√©aire":
            st.write("MAE =", round(mae_lr, 3))
            st.write("MSE =", round(mse_lr, 3))
            st.write("RMSE =", round(rmse_lr, 3))

            # G√©n√©rer la pr√©diction
            y_pred_mod2_lr = lr.predict(df_mod2)
            st.header("La pr√©diction d'√©mission de CO2 (g/km) pour un v√©hicule param√©tr√© comme celui-ci est CO2 :")
            st.header(y_pred_mod2_lr[0])

        if algo_selected == "R√©gression logistique":
            st.write("MAE =", round(mae_logr, 3))
            st.write("MSE =", round(mse_logr, 3))
            st.write("RMSE =", round(rmse_logr, 3))

            # G√©n√©rer la pr√©diction
            y_pred_mod2_logr = logr.predict(df_mod2)
            st.header("La pr√©diction d'√©mission de CO2 (g/km) pour un v√©hicule param√©tr√© comme celui-ci est CO2 :")
            st.header(y_pred_mod2_logr[0])
